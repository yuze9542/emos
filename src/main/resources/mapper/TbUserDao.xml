<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.emos.wx.db.dao.TbUserDao">
    <resultMap id="BaseResultMap" type="com.example.emos.wx.db.pojo.TbUser">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="open_id" jdbcType="VARCHAR" property="openId"/>
        <result column="nickname" jdbcType="VARCHAR" property="nickname"/>
        <result column="photo" jdbcType="VARCHAR" property="photo"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="sex" jdbcType="OTHER" property="sex"/>
        <result column="tel" jdbcType="CHAR" property="tel"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="hiredate" jdbcType="DATE" property="hiredate"/>
        <result column="role" jdbcType="OTHER" property="role"/>
        <result column="root" jdbcType="BOOLEAN" property="root"/>
        <result column="dept_id" jdbcType="INTEGER" property="deptId"/>
        <result column="status" jdbcType="TINYINT" property="status"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    </resultMap>
    <sql id="Base_Column_List">
        id, open_id, nickname, photo, `name`, sex, tel, email, hiredate, `role`, root, dept_id,
        `status`, create_time
    </sql>
    <!-- 如果count(*)是1则为true要不然是false-->
    <select id="haveRootUser" resultType="boolean">
        SELECT IF(COUNT(*),TRUE,FALSE) FROM tb_user WHERE root=1;
    </select>


    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from tb_user
        where id = #{id,jdbcType=INTEGER}
    </select>

    <select id="searchIdByOpenId" parameterType="String" resultType="Integer">
        select id from tb_user where open_id=#{openId} and status=1;
    </select>

    <select id="selectByUserId" resultType="com.example.emos.wx.db.pojo.TbUser">
        select
        id, open_id,nickname,photo,name,sex,tel,role,root,dept_id,status,create_time
        from tb_user
        where id=#{UserId} and status = 1
    </select>
    <select id="searchNameAndDept" parameterType="int" resultType="HashMap">
        SELECT u.name, d.dept_name
        FROM tb_user u LEFT JOIN tb_dept d ON u.dept_id=d.id
        WHERE u.id = #{userId} AND u.status = 1
    </select>

    <select id="searchUserHireDate" parameterType="int" resultType="String">
        select hiredate
        from tb_user u
        where id = #{userId} and u.status = 1
    </select>


    <select id="searchUserGroupByDept" parameterType="String" resultType="HashMap">
        SELECT
        d.id AS deptId,
        d.dept_name AS deptName,
        u.id AS userId,
        u.name
        FROM tb_dept d JOIN tb_user u ON u.dept_id=d.id
        WHERE u.status=1
        <if test="keyword!=null">
            AND u.name LIKE '%${keyword}%'
        </if>
        ORDER BY d.id, u.id;
    </select>
<!--    2.4 根据role角色查询用户-->
    <select id="searchUserGroupByRole" parameterType="int" resultType="HashMap">
        SELECT
            u.NAME AS userName,
            u.id AS userId,
            d.dept_name AS userDept,
            IF
            ( r.id IS NOT NULL, TRUE, FALSE ) AS selected,
            r.role_name AS roleName,
            d.id AS deptId,
            d.dept_name AS deptName
        FROM
            tb_user u
            JOIN tb_dept d ON u.dept_id = d.id
            LEFT JOIN tb_role r ON JSON_CONTAINS(
                 u.role,
                CAST( r.id AS CHAR ))
            AND r.id = #{id}
        WHERE
            u.STATUS = 1
        order by d.id,u.level
    </select>

    <!--  CAST(p.id AS CHAR) ==> 是把p.id 转换为char类型才能运行json_contains函数
        从tb_user员工信息表中寻找 员工身份和 tb_role 身份一样的
                        还有tb_role 中与r.id相对应的r.permissions和p.id相对应的操作
            r.id == [0,1,2,3] 比如取 1
            然后 1 对应的 r.permissions 为 [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]
       然后p.id 中包括 r.permissions 的全部取出来 取了一堆操作-->
    <select id="searchUserPermissions" parameterType="int" resultType="String">
        SELECT p.permission_name
        FROM tb_user u
        JOIN tb_role r ON JSON_CONTAINS(u.role, CAST(r.id AS CHAR))
        JOIN tb_permission p ON JSON_CONTAINS(r.permissions, CAST(p.id AS CHAR))
        WHERE u.id = #{userId} AND u.status = 1;
    </select>

    <!--    tb_dept 部门表-->
    <select id="searchUserSummary" parameterType="int" resultType="HashMap">
        select u.name, u.photo, d.dept_name AS deptName
        from tb_user u LEFT JOIN tb_dept d ON u.dept_id=d.id
        where u.id =#{userId}
    </select>

    <select id="searchMembers" parameterType="list" resultType="HashMap">
        select id,name,photo
        from tb_user
        where status = 1
        and id in
        <foreach collection="list" item="one" separator="," open="(" close=")">
            #{one}
        </foreach>
    </select>
    <select id="searchUserInfo" parameterType="int" resultType="HashMap">
        SELECT
        u.open_id AS openId,
        u.nickname,
        u.name,
        u.photo,
        u.sex,
        u.tel,
        u.email,
        d.dept_name AS dept,
        u.hiredate,
        CASE u.status
        WHEN 1 THEN "在职"
        WHEN 2 THEN "离职"
        END AS status,
        ( SELECT GROUP_CONCAT( role_name separator "，" ) FROM tb_role WHERE JSON_CONTAINS ( u.role, CONVERT ( id, CHAR )
        ) ) AS roles
        FROM tb_user u
        LEFT JOIN tb_dept d ON u.dept_id = d.id
        WHERE u.id = #{userId} AND u.status = 1
    </select>
    <select id="searchDeptManagerId" parameterType="int" resultType="int">
        SELECT
        u2.id
        FROM tb_user u1 JOIN tb_user u2 ON u1.dept_id=u2.dept_id
        JOIN tb_role r ON JSON_CONTAINS(u2.role, CAST(r.id AS CHAR))
        WHERE u1.id=#{id} AND r.id=2 AND u1.status = 1 AND u2.status = 1
    </select>
    <select id="searchGmId" resultType="int">
        SELECT
        u.id
        FROM tb_user u
        JOIN tb_role r ON JSON_CONTAINS(u.role, CAST(r.id AS CHAR))
        WHERE r.id=1 AND u.status = 1
    </select>

    <select id="selectRoleByUserId" parameterType="int" resultType="HashMap">
        select
            u.role as role,
            u.name as name
        from tb_user u
        where u.id =#{userId}
    </select>

    <select id="isExistRoleId" parameterType="HashMap" resultType="boolean">
        select
            if (JSON_CONTAINS(u.role, CAST(#{roleId} AS CHAR)),
            true,false)
        from
            tb_user u
        where
            u.id = #{userId}
    </select>


    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from tb_user
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="HashMap">
        INSERT INTO tb_user
        SET
        <if test="openId!=null">
            open_id = #{openId},
        </if>
        <if test="nickname!=null">
            nickname = #{nickname},
        </if>
        <if test="photo!=null">
            photo = #{photo},
        </if>
        <if test="name!=null">
            name = #{name},
        </if>
        <if test="sex!=null">
            sex = #{sex},
        </if>
        <if test="tel!=null">
            tel = #{tel},
        </if>
        <if test="email!=null">
            email=#{email},
        </if>
        <if test="hiredate!=null">
            hiredate = #{hiredate},
        </if>
        role = #{role},
        root = #{root},
        <if test="deptName!=null">
            dept_id = ( SELECT id FROM tb_dept WHERE dept_name = #{deptName} ),
        </if>
        status = #{status},
        create_time = #{createTime}
    </insert>
    
    <update id="updateInsertRoleId" parameterType="HashMap">
        update
            tb_user u
        set u.role =
            (select u2.v  from (
                (   select
                        JSON_ARRAY_APPEND(u3.role,"$", #{roleId}) as v
                    from tb_user u3
                    where u3.id = #{userId})
            ) u2  )
        where u.id = #{userId}
    </update>

    <update id="updateRoleById" parameterType="HashMap">
        update tb_user u
        set  role = #{updateRoleId}
        where u.id = #{userId}
    </update>

    <update id="updateByPrimaryKeySelective" parameterType="com.example.emos.wx.db.pojo.TbUser">
        update tb_user
        <set>
            <if test="openId != null">
                open_id = #{openId,jdbcType=VARCHAR},
            </if>
            <if test="nickname != null">
                nickname = #{nickname,jdbcType=VARCHAR},
            </if>
            <if test="photo != null">
                photo = #{photo,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                `name` = #{name,jdbcType=VARCHAR},
            </if>
            <if test="sex != null">
                sex = #{sex,jdbcType=OTHER},
            </if>
            <if test="tel != null">
                tel = #{tel,jdbcType=CHAR},
            </if>
            <if test="email != null">
                email = #{email,jdbcType=VARCHAR},
            </if>
            <if test="hiredate != null">
                hiredate = #{hiredate,jdbcType=DATE},
            </if>
            <if test="role != null">
                `role` = #{role,jdbcType=OTHER},
            </if>
            <if test="root != null">
                root = #{root,jdbcType=BOOLEAN},
            </if>
            <if test="deptId != null">
                dept_id = #{deptId,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                `status` = #{status,jdbcType=TINYINT},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.example.emos.wx.db.pojo.TbUser">
        update tb_user
        set open_id = #{openId,jdbcType=VARCHAR},
        nickname = #{nickname,jdbcType=VARCHAR},
        photo = #{photo,jdbcType=VARCHAR},
        `name` = #{name,jdbcType=VARCHAR},
        sex = #{sex,jdbcType=OTHER},
        tel = #{tel,jdbcType=CHAR},
        email = #{email,jdbcType=VARCHAR},
        hiredate = #{hiredate,jdbcType=DATE},
        `role` = #{role,jdbcType=OTHER},
        root = #{root,jdbcType=BOOLEAN},
        dept_id = #{deptId,jdbcType=INTEGER},
        `status` = #{status,jdbcType=TINYINT},
        create_time = #{createTime,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=INTEGER}
    </update>
</mapper>